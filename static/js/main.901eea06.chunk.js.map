{"version":3,"sources":["components/Titles.js","containers/LocationSearchInput.js","containers/ReportForm.js","components/WeatherCard.js","containers/FiveDayForecast.js","components/Weather.js","components/WeatherGraph.js","containers/HourlyForecast.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","reactstrap_es","style","background","color","className","paddingLeft","LocationSearchInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","error","handleSelect","isGeocoding","setFormLocation","geocodeByAddress","then","res","formatted_address","catch","console","handleError","status","clearSuggestions","log","state","dist_default","value","onChange","onSelect","onError","searchOptions","types","shouldFetchSuggestions","length","_ref","getInputProps","getSuggestionItemProps","suggestions","assign","placeholder","borderColor","map","suggestion","description","createReportLocation","React","Component","ReportForm","googleLocation","parsedLoc","split","cityLoc","countryLoc","inputLocation","setReportLocation","containers_LocationSearchInput","WeatherCard","date","Date","body","boxShadow","display","width","toString","getDate","margin","minWidth","src","concat","icon","Math","round","temperature","charAt","toUpperCase","slice","FiveDayForecast","rows","forecastList","list","push","xs","size","offset","md","key","components_WeatherCard","dt_txt","main","temp","weather","newforecastList","filter","element","getDay","i","Weather","country","city","humidity","pressure","wind","cloudiness","WeatherGraph","ResponsiveContainer","height","LineChart","data","top","right","left","bottom","XAxis","dataKey","stroke","Label","position","YAxis","label","angle","CartesianGrid","strokeDasharray","Tooltip","Line","type","activeDot","r","HourlyForecast","time","dateFormat","lg","components_Weather","components_WeatherGraph","App","fetchWeather","asyncToGenerator","regenerator_default","mark","_callee","Api_Key","countryCode","weather_api_call","forecast_api_call","wrap","_context","prev","next","getCode","fetch","sent","json","t0","t1","abrupt","weatherResponse","forecastResponse","stop","_x","_x2","apply","arguments","location","name","getName","sys","speed","clouds","all","reason","message","undefined","bind","assertThisInitialized","_this2","components_Titles","border","borderRadius","containers_ReportForm","textAlign","dayForecastTitle","fluid","containers_HourlyForecast","weekForecastTitle","containers_FiveDayForecast","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAmBeA,SAfA,WAIb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MALQ,CACrBC,WAAY,kEAKRL,EAAAC,EAAAC,cAAA,QAAMI,MAAM,SACVN,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aAAd,eACAP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,OAAMH,MAAO,CAACI,YAAa,SAAxC,+ECoEOC,cA5Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,aAAe,SAACC,GACdR,EAAKS,SAAS,CAAED,UAASE,MAAO,MAVfV,EAmBnBW,aAAe,SAACH,GACdR,EAAKS,SAAS,CAACD,UAASI,aAAa,IACrC,IAAMC,EAAkBb,EAAKD,MAAMc,gBACnCC,2BAAiBN,GACdO,KAAK,SAAAC,GAAG,OAAIH,EAAgBG,EAAI,GAAGC,qBACnCF,KAAK,kBAAMf,EAAKS,SAAS,CAACD,QAAS,GAAII,aAAa,MACpDM,MAAM,SAAAR,GAAK,OAAIS,QAAQT,MAAM,QAASA,MAzBxBV,EA2BnBoB,YAAc,SAACC,EAAQC,GACrBH,QAAQI,IAAI,+BAAgCF,GAC5CrB,EAAKS,SAAS,CAAEC,MAAOW,GAAU,WAC/BC,OA5BFtB,EAAKwB,MAAQ,CACXhB,QAAS,GACTI,aAAa,EACbF,MAAO,IALQV,wEAoDjB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CACEoC,MAAOvB,KAAKqB,MAAMhB,QAClBmB,SAAUxB,KAAKI,aACfqB,SAAUzB,KAAKQ,aACfkB,QAAS1B,KAAKiB,YACdU,cAXgB,CACpBC,MAAO,CAAC,aAYJC,uBAAwB7B,KAAKqB,MAAMhB,QAAQyB,OAAS,GA1BtC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,cAAeC,EAAlBF,EAAkBE,uBAAwBC,EAA1CH,EAA0CG,YAA1C,OAClBhD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAAA,QAAAU,OAAAqC,OAAA,CAAO1C,UAAU,gBAAmBuC,EAAc,CAACI,YAAa,qBAAhE,CAAsF9C,MAAO,CAAEC,WAAY,cAAe8C,YAAa,YACvInD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mCACZyC,EAAYI,IAAI,SAAAC,GAAU,OACzBrD,EAAAC,EAAAC,cAAA,MAAAU,OAAAqC,OAAA,GAASF,EAAuBM,GAAhC,CAA6C9C,UAAU,eACrDP,EAAAC,EAAAC,cAAA,YAAOmD,EAAWC,oBAyBvBxC,KAAKqB,MAAMd,MAAMuB,OAAS,GACzB5C,EAAAC,EAAAC,cAAA,WAAMY,KAAKqB,MAAMd,OAGlBP,KAAKqB,MAAMhB,SAAWL,KAAKqB,MAAMZ,aAAeT,KAAKJ,MAAM6C,+BAvEpCC,IAAMC,WCsCzBC,cArCb,SAAAA,IAAa,IAAA/C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACX/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,QASFU,gBAAkB,SAACmC,GACjB,IAAIC,EAAYD,EAAeE,MAAM,MACrClD,EAAKS,SAAS,CACZ0C,QAASF,EAAU,GACnBG,WAAYH,EAAUA,EAAUhB,OAAS,MAdhCjC,EAoBb4C,qBAAuB,WACrB,IAAMS,EAAgB,CACpBF,QAASnD,EAAKwB,MAAM2B,QACpBC,WAAYpD,EAAKwB,MAAM4B,YAIzBpD,EAAKD,MAAMuD,kBAAkBD,IAzB7BrD,EAAKwB,MAAQ,CACX2B,QAAS,GACTC,WAAY,IAJHpD,wEA+BX,OACEX,EAAAC,EAAAC,cAACgE,EAAD,CAAqBX,qBAAsBzC,KAAKyC,qBAAsB/B,gBAAiBV,KAAKU,yBAlCzEgC,IAAMC,WCyBhBU,EAzBK,SAACzD,GACjB,IAAM0D,EAAO,IAAIC,KAAK3D,EAAM0D,MAY5B,OACApE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SACHF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMmE,MAAI,EAAC/D,UAAU,cAAcH,MARnB,CACdmE,UAAW,gBACXlE,WAAY,cACZmE,QAAS,cACTC,MAAO,SAKPzE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAYiE,EAAKM,WAAWb,MAAM,KAAK,IACvC7D,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAeiE,EAAKM,WAAWb,MAAM,KAAK,GAAK,IAAMO,EAAKO,WAC1D3E,EAAAC,EAAAC,cAAA,OAAKE,MAhBQ,CACboE,QAAQ,eACRI,OAAQ,SACRC,SAAU,OAaYC,IAAG,mCAAAC,OAAqCrE,EAAMsE,KAA3C,UACzBhF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAW8E,KAAKC,MAAMxE,EAAMyE,aAAe,SAC3CnF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAWO,EAAM4C,YAAY8B,OAAO,GAAGC,cAAgB3E,EAAM4C,YAAYgC,MAAM,QCgBxEC,mLAjCX,IAAIC,EAAO,GACPC,EAAe3E,KAAKJ,MAAMgF,KAC9B,GAA0B,oBAAhBD,EACR,MAAO,GAGTD,EAAKG,KACL3F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKyF,GAAI,CAACC,KAAK,EAAGC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAClDE,IAAK,GACLhG,EAAAC,EAAAC,cAAC+F,EAAD,CACE7B,KAAMqB,EAAa,GAAGS,OACtBf,YAAaM,EAAa,GAAGU,KAAKC,KAAO,OACzCpB,KAAMS,EAAa,GAAGY,QAAQ,GAAGrB,KACjC1B,YAAamC,EAAa,GAAGY,QAAQ,GAAG/C,gBAM5C,IAJA,IAAMc,EAAO,IAAIC,KAEXiC,EAAkBb,EAAac,OAAO,SAAAC,GAAO,OAAIpC,EAAKqC,WAAa,IAAIpC,KAAKmC,EAAQN,QAAQO,WAE1FC,EAAE,EAAIA,GAAK,EAAIA,IACrBlB,EAAKG,KAAK3F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKyF,GAAI,CAACC,KAAK,EAAGC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAAIE,IAAKU,EAAE,GACzE1G,EAAAC,EAAAC,cAAC+F,EAAD,CACE7B,KAAMkC,EAAkB,EAAFI,EAAI,GAAGR,OAC7Bf,YAAamB,EAAkB,EAAFI,EAAI,GAAGP,KAAKC,KAAO,OAChDpB,KAAMsB,EAAkB,EAAFI,EAAI,GAAGL,QAAQ,GAAGrB,KACxC1B,YAAagD,EAAkB,EAAFI,EAAI,GAAGL,QAAQ,GAAG/C,gBAInD,OAAOkC,SA/BmBhC,IAAMC,WCarBkD,EAfC,SAACjG,GACf,OACIV,EAAAC,EAAAC,cAAA,WACGQ,EAAMkG,SAAWlG,EAAMmG,MAAQ7G,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMmG,KAArB,KAA6BnG,EAAMkG,SAClElG,EAAMyE,aAAenF,EAAAC,EAAAC,cAAA,0BAAkB+E,KAAKC,MAAMxE,EAAMyE,aAAe,SACvEzE,EAAMoG,UAAY9G,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMoG,SAArB,MAClBpG,EAAMqG,UAAY/G,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMqG,SAArB,QAClBrG,EAAMsG,MAAQhH,EAAAC,EAAAC,cAAA,mBAAWQ,EAAMsG,KAAjB,QACdtG,EAAMuG,YAAcjH,EAAAC,EAAAC,cAAA,yBAAiBQ,EAAMuG,WAAvB,MACpBvG,EAAM4C,aAAetD,EAAAC,EAAAC,cAAA,0BAAkBQ,EAAM4C,aAC7C5C,EAAMW,OAASrB,EAAAC,EAAAC,cAAA,UAAKQ,EAAMW,gFCmBpB6F,EA3BM,SAACxG,GAQlB,OACIV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMmE,MAAI,EAAC/D,UAAU,cAAcH,MARrB,CACdmE,UAAW,gBACXlE,WAAY,cACZmE,QAAS,cACTC,MAAO,OACPI,SAAU,UAIN7E,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAqBC,OAAQ,KACzBpH,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAWC,KAAM5G,EAAM4G,KACvB1C,OAAQ,CAAC2C,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC9C1H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,QAAQ,OAAOC,OAAO,SACzB7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAOzF,MAAM,OAAO0F,SAAS,YAEjC/H,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CAAOH,OAAO,QAAQI,MAAO,CAAE5F,MAAO,kBAAmB6F,OAAQ,GAAIH,SAAU,UAC/E/H,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAeN,OAAO,QAAQO,gBAAgB,QAC9CpI,EAAAC,EAAAC,cAACmI,EAAA,EAAD,MACArI,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAMC,KAAK,WAAWX,QAAQ,cAAcC,OAAO,SAASW,UAAW,CAACC,EAAG,2BC4B5EC,mLA3CP,GAA8B,qBAApB5H,KAAKJ,MAAMmG,MAAsD,qBAAvB/F,KAAKJ,MAAMkG,QAC3D,MAAO,GAQX,IANA,IACIxC,EACAuE,EACAxD,EAHAmC,EAAO,GAMFZ,EAAG,EAAGA,EAAI,EAAGA,IAElBtC,EAAO,IAAIC,KAAKvD,KAAKJ,MAAMgF,KAAKgB,GAAGR,OAAS,QAC5CyC,EAAOC,IAAWxE,EAAM,QAExBe,EAAcF,KAAKC,MAAMpE,KAAKJ,MAAMgF,KAAKgB,GAAGP,KAAKC,KAAO,QACxDkB,EAAK3B,KAAK,CACNgD,OACAxD,gBAIR,OAAOnF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACHH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKyF,GAAI,CAACC,KAAM,EAAGC,OAAQ,GAAI+C,GAAI,CAAChD,KAAM,EAAGC,OAAQ,IAErD9F,EAAAC,EAAAC,cAAC4I,EAAD,CACI3D,YAAarE,KAAKJ,MAAMyE,YACxB0B,KAAM/F,KAAKJ,MAAMmG,KACjBD,QAAS9F,KAAKJ,MAAMkG,QACpBE,SAAUhG,KAAKJ,MAAMoG,SACrBC,SAAUjG,KAAKJ,MAAMqG,SACrBC,KAAMlG,KAAKJ,MAAMsG,KACjBC,WAAYnG,KAAKJ,MAAMuG,WACvB3D,YAAaxC,KAAKJ,MAAM4C,YACxBjC,MAAOP,KAAKJ,MAAMW,SAEtBrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK0I,GAAI,CAAChD,KAAM,EAAGC,OAAQ,GAAIF,GAAG,MAElC5F,EAAAC,EAAAC,cAAC6I,EAAD,CAAczB,KAAQA,aAvCL9D,IAAMC,mBCqGpBuF,cAjGb,SAAAA,EAAYtI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkI,IACjBrI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoI,GAAA/H,KAAAH,KAAMJ,KAiBRuI,aAlBmB,eAAApG,EAAAjC,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAAlJ,EAAAmJ,KAkBJ,SAAAC,EAAOxC,EAAMD,GAAb,IAAA0C,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAlJ,EAAAyJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACVhD,IAAQD,EADE,CAAA+C,EAAAE,KAAA,gBAELP,EAAU,mCAEVC,EAAcO,kBAAQlD,GAJjB+C,EAAAE,KAAA,EAMoBE,MAAK,wFAAAhF,OAAyF8B,EAAzF,KAAA9B,OAAiGwE,EAAjG,WAAAxE,OAAsHuE,IAN/I,cAMLE,EANKG,EAAAK,KAAAL,EAAAE,KAAA,EAOqBE,MAAK,yFAAAhF,OAA0F8B,EAA1F,KAAA9B,OAAkGwE,EAAlG,WAAAxE,OAAuHuE,IAPjJ,cAOLG,EAPKE,EAAAK,KAAAL,EAAAE,KAAA,GASeL,EAAiBS,OAThC,eAAAN,EAAAO,GAAAP,EAAAK,KAAAL,EAAAE,KAAA,GAUgBJ,EAAkBQ,OAVlC,eAAAN,EAAAQ,GAAAR,EAAAK,KAAAL,EAAAS,OAAA,UASTC,gBATSV,EAAAO,GAUTI,iBAVSX,EAAAQ,KAAA,yBAAAR,EAAAY,SAAAlB,EAAAvI,SAlBI,gBAAA0J,EAAAC,GAAA,OAAA5H,EAAA6H,MAAA5J,KAAA6J,YAAA,GAAAhK,EAkCnBsD,kBAAoB,SAAC2G,GACnBjK,EAAKsI,aAAa2B,EAAS9G,QAAS8G,EAAS7G,YAC5CrC,KAAK,SAAA4F,GACJ3G,EAAKS,SAAS,CACZ+D,YAAamC,EAAK+C,gBAAgBlE,KAAKC,KAAO,OAC9CS,KAAMS,EAAK+C,gBAAgBQ,KAC3BjE,QAASkE,kBAAQxD,EAAK+C,gBAAgBU,IAAInE,SAC1CE,SAAUQ,EAAK+C,gBAAgBlE,KAAKW,SACpCC,SAAUO,EAAK+C,gBAAgBlE,KAAKY,SACpCC,KAAMM,EAAK+C,gBAAgBrD,KAAKgE,MAChC/D,WAAYK,EAAK+C,gBAAgBY,OAAOC,IACxC5H,YAAagE,EAAK+C,gBAAgBhE,QAAQ,GAAG/C,YAE7CoC,KAAM4B,EAAKgD,iBAAiB5E,KAC5BrE,MAAO,OAEVQ,MAAM,SAAAsJ,GAAM,OAAIrJ,QAAQI,IAAIiJ,EAAOC,YAhDpCzK,EAAKwB,MAAQ,CACX0E,UAAMwE,EACNzE,aAASyE,EACTlG,iBAAakG,EACbvE,cAAUuE,EACVtE,cAAUsE,EACVrE,UAAMqE,EACNpE,gBAAYoE,EACZ/H,iBAAa+H,EACbrG,UAAMqG,EACN3F,UAAM2F,EACNhK,WAAOgK,GAET1K,EAAKsI,aAAetI,EAAKsI,aAAaqC,KAAlB1K,OAAA2K,EAAA,EAAA3K,QAAA2K,EAAA,EAAA3K,CAAAD,KAfHA,wEAqDX,IAAA6K,EAAA1K,KAWN,OACEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAACuL,EAAD,MACAzL,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACqE,MAAO,MAAOiH,OAAQ,kBAAmBC,aAAc,SACnE3L,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACqE,MAAO,QAASjE,YAAa,SAASR,EAAAC,EAAAC,cAAC0L,EAAD,CAAY3H,kBAAmBnD,KAAKmD,qBACvFjE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACyL,UAAW,WAhBF,WACvB,GAA8B,qBAApBL,EAAKrJ,MAAM0E,MAAsD,qBAAvB2E,EAAKrJ,MAAMyE,QAC7D,MAAO,mBAc4BkF,IACnC9L,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAW4L,OAAK,GAEd/L,EAAAC,EAAAC,cAAC8L,EAAD,CACE7G,YAAarE,KAAKqB,MAAMgD,YACxB0B,KAAM/F,KAAKqB,MAAM0E,KACjBD,QAAS9F,KAAKqB,MAAMyE,QACpBE,SAAUhG,KAAKqB,MAAM2E,SACrBC,SAAUjG,KAAKqB,MAAM4E,SACrBC,KAAMlG,KAAKqB,MAAM6E,KACjBC,WAAYnG,KAAKqB,MAAM8E,WACvB3D,YAAaxC,KAAKqB,MAAMmB,YACxBoC,KAAM5E,KAAKqB,MAAMuD,KACjBrE,MAAOP,KAAKqB,MAAMd,QACpBrB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACyL,UAAW,WA1BH,WACxB,GAA8B,qBAApBL,EAAKrJ,MAAM0E,MAAsD,qBAAvB2E,EAAKrJ,MAAMyE,QAC7D,MAAO,iBAwB8BqF,IACnCjM,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEAH,EAAAC,EAAAC,cAACgM,EAAD,CAAiBxG,KAAQ5E,KAAKqB,MAAMuD,SAGtC1F,EAAAC,EAAAC,cAAA,mBA5FUsD,IAAMC,kBCGJ0I,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAOxM,EAAAC,EAAAC,cAACuM,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpL,KAAK,SAAAqL,GACjCA,EAAaC","file":"static/js/main.901eea06.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\nimport '../App.css';\r\n\r\nconst Titles = () =>{\r\n  const jumbotronStyle = {\r\n    background: 'linear-gradient(rgba(0, 0, 250, 0.35), rgba(125, 250, 250, 0)'\r\n  }\r\n  return (\r\n    <div>\r\n      <Jumbotron style={jumbotronStyle}>\r\n        <font color='white'>\r\n          <h1 className=\"display-1\">Weather App</h1>\r\n          <p className=\"lead\"style={{paddingLeft: \"15px\"}}>Find the 5 day weather forecast for different cities </p>\r\n        </font>\r\n      </Jumbotron>\r\n    </div>\r\n  )\r\n}\r\nexport default Titles;","import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress } from 'react-places-autocomplete'\r\nimport '../App.css';\r\n\r\nclass LocationSearchInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        address: '', \r\n        isGeocoding: false, \r\n        error: '' \r\n    }\r\n    }\r\n    // Have to state every time something is typed in input/search bar\r\n    handleChange = (address) => {\r\n      this.setState({ address, error: '' })\r\n    }\r\n    \r\n    /*  \r\n        Handles the event of clicking a suggestion for autocomplete. \r\n        Sends location information back up to ReportForm container, then eventually App.js to call\r\n        the openweathermap API. Also sets state isGeocoding to true, which indicates it has been selected.\r\n\r\n    */\r\n    handleSelect = (address) => {\r\n      this.setState({address, isGeocoding: true});\r\n      const setFormLocation = this.props.setFormLocation\r\n      geocodeByAddress(address)\r\n        .then(res => setFormLocation(res[0].formatted_address))\r\n        .then(() => this.setState({address: '', isGeocoding: false}))\r\n        .catch(error => console.error('Error', error))\r\n    }\r\n    handleError = (status, clearSuggestions) => {\r\n      console.log('Error from Google Maps API: ', status); \r\n      this.setState({ error: status }, () => {\r\n        clearSuggestions();\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      const renderInput = ({ getInputProps, getSuggestionItemProps, suggestions }) => (\r\n        <div className=\"autocomplete-root\">\r\n          <input className=\"form-control\" {...getInputProps({placeholder: 'Search a city...'})} style={{ background: 'transparent', borderColor: 'white'}}/>\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {suggestions.map(suggestion => (\r\n              <div {...getSuggestionItemProps(suggestion)} className=\"suggestion\">\r\n                <span>{suggestion.description}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n      //Only receive cities as input and suggest accordingly\r\n      const searchOptions = {\r\n        types: ['(cities)'],\r\n       }\r\n  \r\n      return (\r\n        <div>\r\n          <PlacesAutocomplete\r\n            value={this.state.address}\r\n            onChange={this.handleChange}\r\n            onSelect={this.handleSelect}\r\n            onError={this.handleError}\r\n            searchOptions={searchOptions}\r\n            //Only start suggesting after more than 2 characters have been typed\r\n            shouldFetchSuggestions={this.state.address.length > 2}\r\n            >\r\n            {renderInput}\r\n            \r\n          </PlacesAutocomplete>\r\n          {this.state.error.length > 0 && (\r\n            <div>{this.state.error}</div>\r\n          )}\r\n          {/* If there is an address and suggestion is clicked, show the weather information (call API and display) */}\r\n          {this.state.address && this.state.isGeocoding && this.props.createReportLocation()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default LocationSearchInput","import React from \"react\"\r\nimport LocationSearchInput from './LocationSearchInput'\r\n\r\nclass ReportForm extends React.Component {\r\n  // Set up a state to help pass data back to the parent App component\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      cityLoc: '',\r\n      countryLoc: ''\r\n    }\r\n  }\r\n\r\n  // Get the info from the LocationSearchInput component and save\r\n  // it to state here in ReportForm.\r\n  setFormLocation = (googleLocation) => {\r\n    let parsedLoc = googleLocation.split(', ')\r\n    this.setState({\r\n      cityLoc: parsedLoc[0],\r\n      countryLoc: parsedLoc[parsedLoc.length - 1]\r\n    })\r\n  }\r\n\r\n  // Process the form submission with the info that was just\r\n  // saved to ReportForm.state\r\n  createReportLocation = () => {\r\n    const inputLocation = {\r\n      cityLoc: this.state.cityLoc,\r\n      countryLoc: this.state.countryLoc\r\n    }\r\n    // Call the parent App component's setReportLocation function, which\r\n    // sets App.state. so that all other components will have access to it.\r\n    this.props.setReportLocation(inputLocation)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <LocationSearchInput createReportLocation={this.createReportLocation} setFormLocation={this.setFormLocation}/> \r\n    )\r\n  }\r\n}\r\n\r\nexport default ReportForm","import React from 'react';\r\nimport { Card, CardTitle, CardText, CardSubtitle } from 'reactstrap';\r\n\r\nconst WeatherCard = (props) => {\r\n    const date = new Date(props.date);\r\n    const imgStyle = {\r\n        display:'inline-block', \r\n        margin: '0 auto',\r\n        minWidth: '25%'\r\n    };\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%'\r\n    }\r\n    return(\r\n    <div><b>\r\n      <Card body className=\"text-center\" style={cardStyle}>\r\n        <CardTitle>{date.toString().split(' ')[0]}</CardTitle>\r\n        <CardSubtitle>{date.toString().split(' ')[1] + \" \" + date.getDate()}</CardSubtitle>\r\n        <img style={imgStyle} src={`http://openweathermap.org/img/w/${props.icon}.png`}/>\r\n        <CardText>{Math.round(props.temperature) + '\\xB0C'}</CardText>\r\n        <CardText>{props.description.charAt(0).toUpperCase() + props.description.slice(1)}</CardText>\r\n      </Card></b>\r\n    </div>\r\n    )\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from '../components/WeatherCard';\r\nimport { Col } from 'reactstrap';\r\n\r\nclass FiveDayForecast extends React.Component{\r\n  render() {\r\n    let rows = [];\r\n    let forecastList = this.props.list;\r\n    if(typeof forecastList == 'undefined') {\r\n      return \"\"\r\n    }\r\n    //Push first weather card for first day\r\n    rows.push(\r\n    <Col xs={{size:6, offset: 3}} md={{size: 2, offset: 1}} \r\n      key={0}>\r\n      <WeatherCard\r\n        date={forecastList[0].dt_txt}\r\n        temperature={forecastList[0].main.temp - 273.15}\r\n        icon={forecastList[0].weather[0].icon}\r\n        description={forecastList[0].weather[0].description}\r\n      /></Col>);\r\n    const date = new Date();\r\n    //Filter out today's weather information from the list\r\n    const newforecastList = forecastList.filter(element => date.getDay() !== new Date(element.dt_txt).getDay());\r\n    //Loop through 4 more days of forecast information and push with the WeatherCard component for every day\r\n    for(let i=1 ; i <= 4 ; i++) {\r\n      rows.push(<Col xs={{size:6, offset: 3}} md={{size: 2, offset: 0}} key={i+1}>\r\n      <WeatherCard\r\n        date={newforecastList[i*8-1].dt_txt}\r\n        temperature={newforecastList[i*8-1].main.temp - 273.15}\r\n        icon={newforecastList[i*8-1].weather[0].icon}\r\n        description={newforecastList[i*8-1].weather[0].description}\r\n      /></Col>);\r\n    }\r\n    //Display all 5 cards from array\r\n    return rows;\r\n  }\r\n} \r\n\r\nexport default FiveDayForecast;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n  return(\r\n      <div>\r\n        {props.country && props.city && <h5>Location: {props.city}, {props.country}</h5>}\r\n        {props.temperature && <h5>Temperature: {Math.round(props.temperature) + '\\xB0C'}</h5>}\r\n        {props.humidity && <h5>Humidity: {props.humidity} %</h5>}\r\n        {props.pressure && <h5>Pressure: {props.pressure} hPA</h5>}\r\n        {props.wind && <h5>Wind: {props.wind} m/s</h5>}\r\n        {props.cloudiness && <h5>Cloudiness: {props.cloudiness} %</h5>}\r\n        {props.description && <h5>Conditions:  {props.description}</h5>}\r\n        {props.error && <h5>{props.error}</h5>}\r\n     </div >\r\n    \r\n   )\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport { LineChart, Line, Label, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { Card } from 'reactstrap';\r\n\r\nconst WeatherGraph = (props) => {\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        minWidth: '700px'\r\n    }\r\n    return (\r\n        <Card body className=\"text-center\" style={cardStyle}>        \r\n            <ResponsiveContainer height={200}>\r\n                <LineChart data={props.data}\r\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                <XAxis dataKey=\"time\" stroke=\"black\">\r\n                    <Label value=\"Time\" position=\"bottom\" />\r\n                </XAxis>\r\n                <YAxis stroke=\"black\" label={{ value: 'Temperature (C)', angle: -90, position: 'left' }} />\r\n                <CartesianGrid stroke=\"white\" strokeDasharray=\"3 3\"/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"purple\" activeDot={{r: 8}}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>    \r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherGraph;","import React from 'react';\r\nimport Weather from '../components/Weather';\r\nimport WeatherGraph from '../components/WeatherGraph';\r\nimport { Col, Row } from 'reactstrap';\r\nimport dateFormat from 'dateformat';\r\n\r\nclass HourlyForecast extends React.Component{\r\n    render() {\r\n        if(typeof this.props.city === 'undefined' || typeof this.props.country === 'undefined') {\r\n            return \"\";\r\n        }\r\n        let data = []; \r\n        let date;\r\n        let time;\r\n        let temperature;\r\n\r\n        //Loop through the current day for every 3 hours, store the temperture and time in an array\r\n        for (let i =0; i < 9; i++) {\r\n            //Convert to user's timezone\r\n            date = new Date(this.props.list[i].dt_txt + ' UTC')\r\n            time = dateFormat(date, \"H:MM\")\r\n            //Kelvin to Celsius\r\n            temperature = Math.round(this.props.list[i].main.temp - 273.15);\r\n            data.push({\r\n                time,\r\n                temperature\r\n            })\r\n        };\r\n\r\n        return(<Row>\r\n            <Col xs={{size: 8, offset: 0}} lg={{size: 2, offset: 1}}>\r\n            {/* General weather information for today */}\r\n            <Weather\r\n                temperature={this.props.temperature}\r\n                city={this.props.city}\r\n                country={this.props.country}\r\n                humidity={this.props.humidity}\r\n                pressure={this.props.pressure}\r\n                wind={this.props.wind}\r\n                cloudiness={this.props.cloudiness}\r\n                description={this.props.description}\r\n                error={this.props.error} />\r\n            </Col>\r\n            <Col lg={{size: 8, offset: 0}} xs='12'>\r\n            {/* Send todays forecast data to display it in a line graph form */}\r\n            <WeatherGraph data = {data}/>\r\n            </Col>\r\n        </Row>)\r\n    }\r\n} \r\n\r\nexport default HourlyForecast;\r\n","import React from 'react';\nimport Titles from './components/Titles';\nimport ReportForm from './containers/ReportForm';\nimport FiveDayForecast from './containers/FiveDayForecast';\nimport HourlyForecast from './containers/HourlyForecast';\nimport { getCode, getName } from 'country-list';\nimport './App.css'\n\nimport { Container, Row } from 'reactstrap';\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: undefined,\n      country: undefined,\n      temperature: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      wind: undefined,\n      cloudiness: undefined,\n      description: undefined,\n      icon: undefined,\n      list: undefined,\n      error: undefined\n    }\n    this.fetchWeather = this.fetchWeather.bind(this);\n  }\n  //API call to openweathermap for current and 5 day forecast information\n  fetchWeather = async (city, country) => {\n    if(city && country) {\n      const Api_Key = '4f3ccf59baf3fe3b39327995560feed7';\n      //conver country to country code for api url\n      const countryCode = getCode(country);\n\n      const weather_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${Api_Key}`);\n      const forecast_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${Api_Key}`);\n      return { \n        weatherResponse : await weather_api_call.json(),\n        forecastResponse : await forecast_api_call.json()\n      }\n    }\n  }\n\n  //function called by search bar (ReportForm component) to get the location inputted by user \n  setReportLocation = (location) => {\n    this.fetchWeather(location.cityLoc, location.countryLoc)\n    .then(data =>{\n      this.setState({\n        temperature: data.weatherResponse.main.temp - 273.15,\n        city: data.weatherResponse.name,\n        country: getName(data.weatherResponse.sys.country),\n        humidity: data.weatherResponse.main.humidity,\n        pressure: data.weatherResponse.main.pressure,\n        wind: data.weatherResponse.wind.speed,\n        cloudiness: data.weatherResponse.clouds.all,\n        description: data.weatherResponse.weather[0].description,\n        //5 day forecast list\n        list: data.forecastResponse.list,\n        error: \"\"\n      })})\n    .catch(reason => console.log(reason.message))\n  }\n\n  render(){\n    const dayForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"24 Hour Forecast\";\n      }\n    }\n    const weekForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"5 Day Forecast\";\n      }\n    }\n    return(\n      <div className=\"font-wrapper\">\n        <Titles />\n        <hr style={{width: '95%', border: '1px solid white', borderRadius: '5px'}}/>\n        <div style={{width: '450px', paddingLeft: '2.5%'}}><ReportForm setReportLocation={this.setReportLocation} /></div>\n        <br/>\n        <h2 style={{textAlign: 'center'}}>{dayForecastTitle()}</h2>\n        <Container fluid>\n          {/* 24 hour forecast information, passed to Weather and Graphing components after this container */}\n          <HourlyForecast \n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            pressure={this.state.pressure}\n            wind={this.state.wind}\n            cloudiness={this.state.cloudiness}\n            description={this.state.description}\n            list={this.state.list}\n            error={this.state.error} />\n          <br/>\n          <h2 style={{textAlign: 'center'}}>{weekForecastTitle()}</h2>\n          <Row>\n            {/* 5 day forecast list passed to container */}\n          <FiveDayForecast list = {this.state.list}/>\n          </Row>\n        </Container>\n        <br/>\n      </div>\n\n   )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
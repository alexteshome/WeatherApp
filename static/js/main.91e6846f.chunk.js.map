{"version":3,"sources":["components/titles.js","containers/LocationSearchInput.js","containers/ReportForm.js","components/weatherCard.js","containers/fiveDayForecast.js","components/weather.js","components/weatherGraph.js","containers/hourlyForecast.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","reactstrap_es","style","background","color","className","paddingLeft","LocationSearchInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","handleSelect","isGeocoding","setFormLocation","geocodeByAddress","then","res","formatted_address","catch","error","console","handleError","status","clearSuggestions","log","state","suggestionStyle","backgroundColor","fontSize","padding","dist_default","value","onChange","onSelect","onError","searchOptions","types","shouldFetchSuggestions","length","_ref","getInputProps","getSuggestionItemProps","suggestions","assign","placeholder","borderColor","map","suggestion","description","createReportLocation","React","Component","ReportForm","googleLocation","parsedLoc","split","cityLoc","countryLoc","inputLocation","setReportLocation","containers_LocationSearchInput","WeatherCard","date","Date","fontFamily","body","boxShadow","display","width","toString","getDate","margin","minWidth","src","concat","icon","Math","round","temperature","charAt","toUpperCase","slice","FiveDayForecast","rows","forecastList","list","push","xs","size","offset","md","key","weatherCard","dt_txt","main","temp","weather","newforecastList","filter","element","getDay","i","Weather","country","city","humidity","pressure","wind","cloudiness","WeatherGraph","ResponsiveContainer","height","LineChart","data","top","right","left","bottom","XAxis","dataKey","stroke","Label","position","YAxis","label","angle","CartesianGrid","strokeDasharray","Tooltip","Line","type","activeDot","r","HourlyForecast","time","dateFormat","lg","weatherGraph","App","fetchWeather","asyncToGenerator","regenerator_default","mark","_callee","Api_Key","countryCode","weather_api_call","forecast_api_call","wrap","_context","prev","next","getCode","fetch","sent","json","t0","t1","abrupt","weatherResponse","forecastResponse","stop","_x","_x2","apply","arguments","location","name","getName","sys","speed","clouds","all","reason","message","undefined","bind","assertThisInitialized","_this2","titles","border","borderRadius","containers_ReportForm","textAlign","dayForecastTitle","fluid","hourlyForecast","weekForecastTitle","fiveDayForecast","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91e6846f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nconst Titles = () =>{\r\n  const jumbotronStyle = {\r\n    background: 'linear-gradient(rgba(0, 0, 250, 0.35), rgba(125, 250, 250, 0)'\r\n  }\r\n  return (\r\n    <div>\r\n      <Jumbotron style={jumbotronStyle}>\r\n        <font color='white'>\r\n          <h1 className=\"display-1\">Weather App </h1>\r\n          <p className=\"lead\"style={{paddingLeft: \"15px\"}}>Find the 5 day weather forecast for different cities </p>\r\n        </font>\r\n      </Jumbotron>\r\n    </div>\r\n  )\r\n}\r\nexport default Titles;","import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress } from 'react-places-autocomplete'\r\n\r\nclass LocationSearchInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        address: '', \r\n        isGeocoding: false, \r\n        error: '' \r\n    }\r\n    }\r\n  \r\n    handleChange = (address) => {\r\n      this.setState({ address })\r\n    }\r\n  \r\n    handleSelect = (address) => {\r\n      this.setState({address, isGeocoding: true});\r\n      const setFormLocation = this.props.setFormLocation\r\n      geocodeByAddress(address)\r\n        .then(res => setFormLocation(res[0].formatted_address))\r\n        .then(() => this.setState({address: '', isGeocoding: false}))\r\n        .catch(error => console.error('Error', error))\r\n    }\r\n    handleError = (status, clearSuggestions) => {\r\n      console.log('Error from Google Maps API: ', status); \r\n      this.setState({ error: status }, () => {\r\n        clearSuggestions();\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      const suggestionStyle = {\r\n        backgroundColor: '#f1f1f1',\r\n        color: 'gray',\r\n        fontSize: '90%',\r\n        padding: '0.25em 0.7em'\r\n      }\r\n      const renderInput = ({ getInputProps, getSuggestionItemProps, suggestions }) => (\r\n        <div className=\"autocomplete-root\">\r\n          <input className=\"form-control\" {...getInputProps({placeholder: 'Search a city...'})} style={{ background: 'transparent', borderColor: 'white'}}/>\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {suggestions.map(suggestion => (\r\n              <div {...getSuggestionItemProps(suggestion)} className=\"suggestion\" style={suggestionStyle}>\r\n                <span>{suggestion.description}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n  \r\n      const searchOptions = {\r\n        types: ['(cities)'],\r\n       }\r\n  \r\n      return (\r\n        <div>\r\n          <PlacesAutocomplete\r\n            value={this.state.address}\r\n            onChange={this.handleChange}\r\n            onSelect={this.handleSelect}\r\n            onError={this.handleError}\r\n            searchOptions={searchOptions}\r\n            shouldFetchSuggestions={this.state.address.length > 2}\r\n            >\r\n            {renderInput}\r\n            \r\n          </PlacesAutocomplete>\r\n          {this.state.error.length > 0 && (\r\n            <div>{this.state.error}</div>\r\n          )}\r\n          {this.state.address && this.state.isGeocoding && this.props.createReportLocation()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default LocationSearchInput","import React from \"react\"\r\n// import the LocationSearchInput\r\nimport LocationSearchInput from './LocationSearchInput'\r\n\r\nclass ReportForm extends React.Component {\r\n  // Set up a state to help pass data back to the parent App component\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      cityLoc: '',\r\n      countryLoc: ''\r\n    }\r\n  }\r\n\r\n  // Get the info from the LocationSearchInput component and save\r\n  // it to state here in ReportForm.\r\n  setFormLocation = (googleLocation) => {\r\n    let parsedLoc = googleLocation.split(', ')\r\n    this.setState({\r\n      cityLoc: parsedLoc[0],\r\n      countryLoc: parsedLoc[parsedLoc.length - 1]\r\n    })\r\n  }\r\n\r\n  // Process the form submission with the info that was just\r\n  // saved to ReportForm.state\r\n  createReportLocation = () => {\r\n    const inputLocation = {\r\n      cityLoc: this.state.cityLoc,\r\n      countryLoc: this.state.countryLoc\r\n    }\r\n    // Call the parent App component's setReportLocation function, which\r\n    // sets App.state. so that all other components will have access to it.\r\n    this.props.setReportLocation(inputLocation)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <LocationSearchInput createReportLocation={this.createReportLocation} setFormLocation={this.setFormLocation}/> \r\n    )\r\n  }\r\n}\r\n\r\nexport default ReportForm","import React from 'react';\r\nimport { Card, CardTitle, CardText, CardSubtitle } from 'reactstrap';\r\n\r\nconst WeatherCard = (props) => {\r\n    const date = new Date(props.date);\r\n    const imgStyle = {\r\n        display:'inline-block', \r\n        margin: '0 auto',\r\n        minWidth: '25%'\r\n    };\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%'\r\n    }\r\n\r\n    return(\r\n    <div  style={{fontFamily: 'Arial'}}><b>\r\n      <Card body className=\"text-center\" style={cardStyle}>\r\n        <CardTitle>{date.toString().split(' ')[0]}</CardTitle>\r\n        <CardSubtitle>{date.toString().split(' ')[1] + \" \" + date.getDate()}</CardSubtitle>\r\n        <img style={imgStyle} src={`http://openweathermap.org/img/w/${props.icon}.png`}/>\r\n        <CardText>{Math.round(props.temperature) + '\\xB0C'}</CardText>\r\n        <CardText>{props.description.charAt(0).toUpperCase() + props.description.slice(1)}</CardText>\r\n      </Card></b>\r\n    </div>\r\n    )\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from '../components/weatherCard';\r\nimport { Col } from 'reactstrap';\r\n\r\nclass FiveDayForecast extends React.Component{\r\n  render() {\r\n    let rows = [];\r\n    let forecastList = this.props.list;\r\n    if(typeof forecastList == 'undefined') {\r\n      return \"\"\r\n    }\r\n    rows.push(\r\n    <Col xs={{size:6, offset: 3}} md={{size: 2, offset: 1}} \r\n      key={0}>\r\n      <WeatherCard\r\n        date={forecastList[0].dt_txt}\r\n        temperature={forecastList[0].main.temp - 273.15}\r\n        icon={forecastList[0].weather[0].icon}\r\n        description={forecastList[0].weather[0].description}\r\n      /></Col>);\r\n    const date = new Date();\r\n    const newforecastList = forecastList.filter(element => date.getDay() !== new Date(element.dt_txt).getDay());\r\n    \r\n    for(let i=1 ; i <= 4 ; i++) {\r\n      rows.push(<Col xs={{size:6, offset: 3}} md={{size: 2, offset: 0}} key={i+1}>\r\n      <WeatherCard\r\n        date={newforecastList[i*8-1].dt_txt}\r\n        temperature={newforecastList[i*8-1].main.temp - 273.15}\r\n        icon={newforecastList[i*8-1].weather[0].icon}\r\n        description={newforecastList[i*8-1].weather[0].description}\r\n      /></Col>);\r\n    }\r\n    return rows;\r\n  }\r\n} \r\n\r\nexport default FiveDayForecast;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n \r\n  return(\r\n    \r\n      <div>\r\n        {props.country && props.city && <h5>Location: {props.city},    {props.country}</h5>}\r\n        {props.temperature && <h5>Temperature: {Math.round(props.temperature) + '\\xB0C'}</h5>}\r\n        {props.humidity && <h5>Humidity: {props.humidity} %</h5>}\r\n        {props.pressure && <h5>Pressure: {props.pressure} hPA</h5>}\r\n        {props.wind && <h5>Wind: {props.wind} m/s</h5>}\r\n        {props.cloudiness && <h5>Cloudiness: {props.cloudiness} %</h5>}\r\n        {props.description && <h5>Conditions:  {props.description}</h5>}\r\n        {props.error && <h5>{props.error}</h5>}\r\n     </div >\r\n    \r\n   )\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport { LineChart, Line, Label, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { Card } from 'reactstrap';\r\n\r\nconst WeatherGraph = (props) => {\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        minWidth: '700px'\r\n        \r\n    }\r\n\r\n    return (\r\n        \r\n        <Card body className=\"text-center\" style={cardStyle}>        \r\n            <ResponsiveContainer height={200}>\r\n                <LineChart data={props.data}\r\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                <XAxis dataKey=\"time\" stroke=\"black\">\r\n                    <Label value=\"Time\" position=\"bottom\" />\r\n                </XAxis>\r\n                <YAxis stroke=\"black\" label={{ value: 'Temperature (C)', angle: -90, position: 'left' }} />\r\n                <CartesianGrid stroke=\"white\" strokeDasharray=\"3 3\"/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"purple\" activeDot={{r: 8}}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>    \r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherGraph;","import React from 'react';\r\nimport Weather from '../components/weather';\r\nimport WeatherGraph from '../components/weatherGraph';\r\nimport { Col, Row } from 'reactstrap';\r\nimport dateFormat from 'dateformat';\r\n\r\nclass HourlyForecast extends React.Component{\r\n    render() {\r\n        if(typeof this.props.city === 'undefined' || typeof this.props.country === 'undefined') {\r\n            return \"\";\r\n        }\r\n\r\n        let data = []; \r\n        let date;\r\n        let time;\r\n        let temperature;\r\n        for (let i =0; i < 9; i++) {\r\n            date = new Date(this.props.list[i].dt_txt + ' UTC')\r\n            time = dateFormat(date, \"H:MM\")\r\n            temperature = Math.round(this.props.list[i].main.temp - 273.15);\r\n            data.push({\r\n                time,\r\n                temperature\r\n            })\r\n        };\r\n\r\n        return(<Row>\r\n            <Col xs={{size: 8, offset: 0}} lg={{size: 2, offset: 1}}>\r\n            <Weather\r\n                temperature={this.props.temperature}\r\n                city={this.props.city}\r\n                country={this.props.country}\r\n                humidity={this.props.humidity}\r\n                pressure={this.props.pressure}\r\n                wind={this.props.wind}\r\n                cloudiness={this.props.cloudiness}\r\n                description={this.props.description}\r\n                error={this.props.error} />\r\n            </Col>\r\n            <Col lg={{size: 8, offset: 0}} xs='12'>\r\n            <WeatherGraph data = {data}/>\r\n            </Col>\r\n        </Row>)\r\n    }\r\n} \r\n\r\nexport default HourlyForecast;\r\n","import React from 'react';\nimport Titles from './components/titles';\nimport ReportForm from './containers/ReportForm';\nimport FiveDayForecast from './containers/fiveDayForecast';\nimport HourlyForecast from './containers/hourlyForecast';\nimport { getCode, getName } from 'country-list';\n\nimport { Container, Row } from 'reactstrap';\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: undefined,\n      country: undefined,\n      temperature: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      wind: undefined,\n      cloudiness: undefined,\n      description: undefined,\n      icon: undefined,\n      list: undefined,\n      error: undefined\n    }\n    this.fetchWeather = this.fetchWeather.bind(this);\n  }\n  fetchWeather = async (city, country) => {\n    if(city && country) {\n      const Api_Key = '4f3ccf59baf3fe3b39327995560feed7';\n      \n      const countryCode = getCode(country);\n\n      const weather_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${Api_Key}`);\n      const forecast_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${Api_Key}`);\n      return { \n        weatherResponse : await weather_api_call.json(),\n        forecastResponse : await forecast_api_call.json()\n      }\n    }\n  }\n\n  setReportLocation = (location) => {\n    this.fetchWeather(location.cityLoc, location.countryLoc)\n    .then(data =>{\n      this.setState({\n        temperature: data.weatherResponse.main.temp - 273.15,\n        city: data.weatherResponse.name,\n        country: getName(data.weatherResponse.sys.country),\n        humidity: data.weatherResponse.main.humidity,\n        pressure: data.weatherResponse.main.pressure,\n        wind: data.weatherResponse.wind.speed,\n        cloudiness: data.weatherResponse.clouds.all,\n        description: data.weatherResponse.weather[0].description,\n        list: data.forecastResponse.list,\n        error: \"\"\n      })})\n    .catch(reason => console.log(reason.message))\n  }\n\n  render(){\n    const dayForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"24 Hour Forecast\";\n      }\n    }\n    const weekForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"5 Day Forecast\";\n      }\n    }\n    return(\n      <div  style={{fontFamily: 'Open Sans', color: 'white'}}>\n        <Titles />\n        <hr style={{width: '95%', border: '1px solid white', borderRadius: '5px'}}/>\n        <div style={{width: '35%', paddingLeft: '2.5%'}}><ReportForm setReportLocation={this.setReportLocation} /></div>\n        <br/>\n        <h2 style={{textAlign: 'center'}}>{dayForecastTitle()}</h2>\n        <Container fluid>\n          <HourlyForecast \n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            pressure={this.state.pressure}\n            wind={this.state.wind}\n            cloudiness={this.state.cloudiness}\n            description={this.state.description}\n            list={this.state.list}\n            error={this.state.error} />\n          <br/>\n          <h2 style={{textAlign: 'center'}}>{weekForecastTitle()}</h2>\n          <Row>\n          <FiveDayForecast list = {this.state.list}/>\n          </Row>\n        </Container>\n        <br/>\n      </div>\n\n   )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
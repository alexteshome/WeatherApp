{"version":3,"sources":["actions/getForecast.js","containers/LocationSearchInput.js","actions/types.js","components/Titles.js","components/WeatherCard.js","containers/FiveDayForecast.js","components/Weather.js","components/WeatherGraph.js","containers/WeatherGraphData.js","components/DayForecast.js","reducers/index.js","reducers/dayForecastReducer.js","reducers/weekForecastReducer.js","reducers/errorReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchDayForecast","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","city","country","countryCode","weather_api_call","wrap","_context","prev","next","getCode","fetch","concat","sent","abrupt","json","stop","this","_x","_x2","apply","arguments","fetchWeekForecast","_ref2","_callee2","forecast_api_call","_context2","_x3","_x4","LocationSearchInput","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","error","handleSelect","geocodeByAddress","then","res","parsedLoc","formatted_address","split","cityCountryLoc","cityLoc","countryLoc","length","getDayForecast","getWeekForecast","catch","console","handleError","status","clearSuggestions","log","state","nextProps","errors","react_default","createElement","className","dist_default","value","onChange","onSelect","onError","searchOptions","types","shouldFetchSuggestions","getInputProps","getSuggestionItemProps","suggestions","assign","placeholder","map","suggestion","description","React","Component","mapDispatchToProps","location","dispatch","type","payload","err","list","connect","Titles","reactstrap_es","color","containers_LocationSearchInput","classname","WeatherCard","date","Date","body","style","boxShadow","background","display","width","toString","getDate","margin","minWidth","src","icon","alt","Math","round","temperature","charAt","toUpperCase","slice","weekForecast","row","forecastList","push","xs","size","offset","md","key","components_WeatherCard","dt_txt","main","temp","weather","newforecastList","filter","element","getDay","i","textAlign","dayForecast","humidity","pressure","wind","cloudiness","WeatherGraph","ResponsiveContainer","height","LineChart","data","top","right","left","bottom","XAxis","dataKey","stroke","Label","position","YAxis","label","angle","CartesianGrid","strokeDasharray","Tooltip","Line","activeDot","r","time","dateFormat","components_WeatherGraph","lg","components_Weather","containers_WeatherGraphData","combineReducers","undefined","action","objectSpread","name","getName","sys","speed","clouds","all","store","createStore","rootReducer","compose","applyMiddleware","thunk","App","es","components_Titles","fluid","components_DayForecast","containers_FiveDayForecast","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f050ed63.chunk.js","sourcesContent":["import { GET_DAY_FORECAST } from './types';\r\nimport { GET_WEEK_FORECAST } from './types';\r\nimport { GET_ERRORS } from './types';\r\nimport { getCode } from 'country-list';\r\n\r\n// Fetch today's forecast details, returns a promise.\r\nconst fetchDayForecast = async (city, country) => {\r\n    if(city && country) {\r\n        const Api_Key = '4f3ccf59baf3fe3b39327995560feed7';\r\n        //convert country to country code for api url\r\n        const countryCode = getCode(country);\r\n        const weather_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${Api_Key}`);\r\n        return weather_api_call.json();\r\n           \r\n    }\r\n}\r\n\r\n// Fetch the 5 day forecast details, returns a promise.\r\nconst fetchWeekForecast = async (city, country) => {\r\n    if(city && country) {\r\n        const Api_Key = '4f3ccf59baf3fe3b39327995560feed7';\r\n        //convert country to country code for api url\r\n        const countryCode = getCode(country);\r\n        const forecast_api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${Api_Key}`);\r\n        return forecast_api_call.json();\r\n    }\r\n}\r\n\r\n//Asynchronous action creators, dispatches to reducer and is stored depending on action type\r\nexport const getDayForecast = location => dispatch => {\r\n    fetchDayForecast(location.cityLoc, location.countryLoc)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_DAY_FORECAST,\r\n                payload: res\r\n            })})\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err\r\n            })\r\n        })\r\n}\r\n\r\nexport const getWeekForecast = location => dispatch => {\r\n    fetchWeekForecast(location.cityLoc, location.countryLoc)\r\n        .then(res => \r\n            dispatch({\r\n                type: GET_WEEK_FORECAST,\r\n                payload: res.list\r\n            }))\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err\r\n            })\r\n        })\r\n}\r\n","import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress } from 'react-places-autocomplete'\r\nimport { getDayForecast, getWeekForecast } from '../actions/getForecast';\r\nimport { connect } from 'react-redux';\r\nimport '../App.css';\r\n\r\nclass LocationSearchInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        address: '', \r\n        error: '' \r\n    }\r\n    }\r\n    // Have to state every time something is typed in input/search bar\r\n    handleChange = (address) => {\r\n      this.setState({ address, error: '' })\r\n    }\r\n    \r\n    /*  \r\n        Handles the event of clicking a suggestion for autocomplete. \r\n        Uses the action creator to call the api using redux-thunk's asynchronous calls and saves\r\n        the details of both today's and five day weather forecasts in the store. \r\n\r\n    */\r\n    handleSelect = (address) => {\r\n        geocodeByAddress(address)\r\n            .then(res => {\r\n                const parsedLoc = res[0].formatted_address.split(', ')\r\n                const cityCountryLoc = {\r\n                    cityLoc: parsedLoc[0],\r\n                    countryLoc: parsedLoc[parsedLoc.length - 1]\r\n                }\r\n                this.props.getDayForecast(cityCountryLoc);\r\n                this.props.getWeekForecast(cityCountryLoc);\r\n            })\r\n            .then(() => this.setState({address: ''}))\r\n            .catch(error => console.error('Error', error))        \r\n    }\r\n        \r\n    handleError = (status, clearSuggestions) => {\r\n        console.log('Error from Google Maps API: ', status); \r\n        this.setState({ error: status }, () => {\r\n            clearSuggestions();\r\n        });\r\n    };\r\n    \r\n    componentWillReceiveProps(nextProps) { \r\n        if(nextProps.errors) {\r\n            this.setState({\r\n                error: nextProps.error\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const renderInput = ({ getInputProps, getSuggestionItemProps, suggestions }) => (\r\n            <div className=\"autocomplete-root\">\r\n            <input className=\"form-control\" {...getInputProps({placeholder: 'Search a city...'})}/>\r\n            <div className=\"autocomplete-dropdown-container\">\r\n                {suggestions.map(suggestion => (\r\n                <div {...getSuggestionItemProps(suggestion)} className=\"suggestion\">\r\n                    <span>{suggestion.description}</span>\r\n                </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n        //Only receive cities as input and suggest accordingly\r\n        const searchOptions = {\r\n            types: ['(cities)'],\r\n        }\r\n    \r\n        return (\r\n            <div className=\"search-bar\">\r\n            <PlacesAutocomplete\r\n                value={this.state.address}\r\n                onChange={this.handleChange}\r\n                onSelect={this.handleSelect}\r\n                onError={this.handleError}\r\n                searchOptions={searchOptions}\r\n                //Only start suggesting after more than 2 characters have been typed\r\n                shouldFetchSuggestions={this.state.address.length > 2}\r\n                >\r\n                {renderInput}\r\n                \r\n            </PlacesAutocomplete>\r\n            {this.state.error.length > 0 && (\r\n                <div>{this.state.error}</div>\r\n            )}\r\n            </div>\r\n        );\r\n        }\r\n}\r\n  \r\nconst mapStateToProps = (state) => ({\r\n    error: state.error\r\n})\r\n// Pass in action creators as props\r\nconst mapDispatchToProps = {\r\n    getDayForecast,\r\n    getWeekForecast\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearchInput);","export const GET_DAY_FORECAST = 'GET_DAY_FORECAST';\r\nexport const GET_WEEK_FORECAST = 'GET_WEEK_FORECAST';\r\nexport const GET_ERRORS = 'GET_ERRORS';","import React from 'react';\r\nimport LocationSearchInput from '../containers/LocationSearchInput';\r\nimport { Jumbotron } from 'reactstrap';\r\nimport '../App.css';\r\n\r\nconst Titles = () =>{\r\n    return (\r\n        <div>\r\n        <Jumbotron className='jumbotron text-center'>\r\n            <font color='white'>\r\n            <h1 className=\"display-1\">City Forecast</h1>\r\n            <p className=\"lead\">Find the 5 day weather forecast for different cities </p>\r\n            </font>\r\n            <LocationSearchInput classname=\"search-bar\"/>\r\n            <br/>\r\n        </Jumbotron>\r\n        </div>\r\n    )\r\n}\r\nexport default Titles;","import React from 'react';\r\nimport { Card, CardTitle, CardText, CardSubtitle } from 'reactstrap';\r\n\r\nconst WeatherCard = (props) => {\r\n    const date = new Date(props.date);\r\n    const imgStyle = {\r\n        display:'inline-block', \r\n        margin: '0 auto',\r\n        minWidth: '25%'\r\n    };\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%'\r\n    }\r\n    return(\r\n    <div><b>\r\n      <Card body className=\"text-center\" style={cardStyle}>\r\n        <CardTitle>{date.toString().split(' ')[0]}</CardTitle>\r\n        <CardSubtitle>{date.toString().split(' ')[1] + \" \" + date.getDate()}</CardSubtitle>\r\n        <img style={imgStyle} src={`http://openweathermap.org/img/w/${props.icon}.png`} alt={props.description}/>\r\n        <CardText>{Math.round(props.temperature) + '\\xB0C'}</CardText>\r\n        <CardText>{props.description.charAt(0).toUpperCase() + props.description.slice(1)}</CardText>\r\n      </Card></b>\r\n    </div>\r\n    )\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from '../components/WeatherCard';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nconst FiveDayForecast = (props) => {\r\n    let row = [];\r\n    let forecastList = props.list;\r\n    if(typeof forecastList == 'undefined') {\r\n    return \"\"\r\n    }\r\n    //Push first weather card for first day\r\n    row.push(\r\n    <Col xs={{size:6, offset: 3}} md={{size: 2, offset: 1}} \r\n    key={0}>\r\n    <WeatherCard\r\n        date={forecastList[0].dt_txt}\r\n        temperature={forecastList[0].main.temp - 273.15}\r\n        icon={forecastList[0].weather[0].icon}\r\n        description={forecastList[0].weather[0].description}\r\n    /></Col>);\r\n    const date = new Date();\r\n    //Filter out today's weather information from the list\r\n    const newforecastList = forecastList.filter(element => date.getDay() !== new Date(element.dt_txt).getDay());\r\n    //Loop through 4 more days of forecast information and push with the WeatherCard component for every day\r\n    for(let i=1 ; i <= 4 ; i++) {\r\n    row.push(<Col xs={{size:6, offset: 3}} md={{size: 2, offset: 0}} key={i+1}>\r\n    <WeatherCard\r\n        date={newforecastList[i*8-1].dt_txt}\r\n        temperature={newforecastList[i*8-1].main.temp - 273.15}\r\n        icon={newforecastList[i*8-1].weather[0].icon}\r\n        description={newforecastList[i*8-1].weather[0].description}\r\n    /></Col>);\r\n    }\r\n    //Display all 5 cards from array\r\n    return (\r\n        <div>\r\n            <h2 style={{textAlign: 'center'}}>5 Day Forecast</h2>\r\n            <Row>{row}</Row>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Pass in the list called from the weather api in the redux state as a prop\r\nconst mapStateToProps = (state) => ({\r\n    list: state.weekForecast.list,  \r\n})\r\nexport default connect(mapStateToProps)(FiveDayForecast);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Weather = (props) => {\r\n    return(\r\n        <div>\r\n            {props.country && props.city && <h5>Location: {props.city}, {props.country}</h5>}\r\n            {props.temperature && <h5>Temperature: {Math.round(props.temperature) + '\\xB0C'}</h5>}\r\n            {props.humidity && <h5>Humidity: {props.humidity} %</h5>}\r\n            {props.pressure && <h5>Pressure: {props.pressure} hPA</h5>}\r\n            {props.wind && <h5>Wind: {props.wind} m/s</h5>}\r\n            {props.cloudiness && <h5>Cloudiness: {props.cloudiness} %</h5>}\r\n            {props.description && <h5>Conditions:  {props.description}</h5>}\r\n        </div >\r\n    )\r\n}\r\n\r\n// Pass in current weather details as props from redux state that called the weather api\r\nconst mapStateToProps = (state) => ({\r\n    temperature: state.dayForecast.temperature,\r\n    city: state.dayForecast.city,\r\n    country: state.dayForecast.country,\r\n    humidity: state.dayForecast.humidity,\r\n    pressure: state.dayForecast.pressure,\r\n    wind: state.dayForecast.wind,\r\n    cloudiness: state.dayForecast.cloudiness,\r\n    description: state.dayForecast.description,  \r\n})\r\nexport default connect(mapStateToProps)(Weather);","import React from 'react';\r\nimport { LineChart, Line, Label, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { Card } from 'reactstrap';\r\n\r\nconst WeatherGraph = (props) => {\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        minWidth: '700px'\r\n    }\r\n    return (\r\n        <Card body className=\"text-center\" style={cardStyle}>        \r\n            <ResponsiveContainer height={230}>\r\n                <LineChart data={props.data}\r\n                margin={{top: 5, right: 30, left: 20, bottom: 30}}>\r\n                <XAxis dataKey=\"time\" stroke=\"black\">\r\n                    <Label value=\"Time\" position=\"bottom\" offset={0}/>\r\n                </XAxis>\r\n                <YAxis stroke=\"black\" label={{ value: 'Temperature (C)', angle: -90 }} />\r\n                <CartesianGrid stroke=\"grey\" strokeDasharray=\"3 3\"/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"blue\" activeDot={{r: 8}}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>    \r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherGraph;","import React from 'react'\r\nimport WeatherGraph from '../components/WeatherGraph';\r\nimport dateFormat from 'dateformat';\r\nimport { connect } from 'react-redux';\r\n\r\nconst WeatherGraphData = (props) => {\r\n    if(typeof props.list === 'undefined') {\r\n        return \"\";\r\n    }\r\n    let data = []; \r\n    let date;\r\n    let time;\r\n    let temperature;\r\n\r\n    //Loop through the current day for every 3 hours, store the temperture and time in an array\r\n    for (let i =0; i < 9; i++) {\r\n        //Convert to user's timezone\r\n        date = new Date(props.list[i].dt_txt + ' UTC')\r\n        time = dateFormat(date, \"H:MM\")\r\n        //Kelvin to Celsius\r\n        temperature = Math.round(props.list[i].main.temp - 273.15);\r\n        data.push({\r\n            time,\r\n            temperature\r\n        })\r\n    };\r\n    return(\r\n        <WeatherGraph data = {data}/>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    list: state.weekForecast.list,  \r\n})\r\nexport default connect(mapStateToProps)(WeatherGraphData);\r\n\r\n","import React from 'react';\r\nimport Weather from './Weather';\r\nimport WeatherGraphData from '../containers/WeatherGraphData';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nconst DayForecast = (props) => {\r\n    // Do not render until all weather information is available\r\n    if (typeof props.city === 'undefined' || typeof props.list === 'undefined') {\r\n        return '';\r\n    }\r\n    return(\r\n    <div>\r\n        <h2 style={{textAlign: 'center'}}>24 Hour Forecast</h2>\r\n        <Row>\r\n            <Col xs={{size: 8, offset: 0}} lg={{size: 2, offset: 1}}>\r\n                {/* General weather information for today */}\r\n                <Weather/>\r\n            </Col>\r\n            <Col lg={{size: 8, offset: 0}} xs='12'>\r\n                {/* Send todays forecast data to display it in a line graph form */}\r\n                <WeatherGraphData/>\r\n            </Col>\r\n        </Row>\r\n    </div>)\r\n} \r\nconst mapStateToProps = (state) => ({\r\n    city: state.dayForecast.city,\r\n    list: state.weekForecast.list\r\n})\r\nexport default connect(mapStateToProps)(DayForecast);","import { combineReducers } from 'redux';\r\nimport dayForecastReducer from './dayForecastReducer';\r\nimport weekForecastReducer from './weekForecastReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport default combineReducers({\r\n    dayForecast: dayForecastReducer,\r\n    weekForecast: weekForecastReducer,\r\n    error: errorReducer\r\n});","import { GET_DAY_FORECAST } from '../actions/types';\r\nimport { getName } from 'country-list';\r\n\r\n\r\nexport default function(state = {}, action ) {\r\n    switch(action.type) {\r\n        case GET_DAY_FORECAST:\r\n            return {\r\n                ...state,\r\n                temperature: action.payload.main.temp - 273.15,\r\n                city: action.payload.name,\r\n                // getName returns the full name of country from its country code\r\n                country: getName(action.payload.sys.country),\r\n                humidity: action.payload.main.humidity,\r\n                pressure: action.payload.main.pressure,\r\n                wind: action.payload.wind.speed,\r\n                cloudiness: action.payload.clouds.all,\r\n                description: action.payload.weather[0].description\r\n                \r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n ","import { GET_WEEK_FORECAST } from '../actions/types';\r\n\r\n\r\nexport default function(state = {}, action ) {\r\n    switch(action.type) {\r\n        case GET_WEEK_FORECAST:\r\n            return {\r\n                ...state,\r\n                list: action.payload\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n ","import { GET_ERRORS } from '../actions/types';\r\n\r\nexport default function(state = {}, action ) {\r\n    switch(action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst inititalState = {};\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    inititalState, \r\n    compose(applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport Titles from './components/Titles';\nimport FiveDayForecast from './containers/FiveDayForecast';\nimport DayForecast from './components/DayForecast';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './App.css'\nimport { Container } from 'reactstrap';\n\nconst App = () => {\n\n    return(\n        <Provider store = { store }>\n            <div className=\"font-wrapper\">\n            <Titles/>\n            <Container fluid>\n                {/* 24 hour forecast information, passed to Weather and Graphing components after this container */}\n                <DayForecast />\n                <br/>\n                {/* 5 day forecast list passed to container */}\n                <FiveDayForecast/>\n            </Container>\n            <br/>\n            </div>\n        </Provider>\n    )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
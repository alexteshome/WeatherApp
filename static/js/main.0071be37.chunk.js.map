{"version":3,"sources":["components/titles.js","components/search.js","components/weather.js","components/weatherCard.js","components/weatherGraph.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","reactstrap_es","style","background","color","className","paddingLeft","Search","props","fluid","onSubmit","loadWeather","inline","for","hidden","borderColor","type","name","placeholder","Weather","country","city","temperature","Math","round","humidity","pressure","wind","cloudiness","description","error","WeatherCard","date","Date","fontFamily","body","boxShadow","display","width","toString","split","getDate","margin","minWidth","src","concat","icon","charAt","toUpperCase","slice","WeatherGraph","time","data","i","dataList","dt_txt","dateFormat","main","temp","push","ResponsiveContainer","height","LineChart","top","right","left","bottom","XAxis","dataKey","stroke","Label","value","position","YAxis","label","angle","CartesianGrid","strokeDasharray","Tooltip","Line","activeDot","r","App","state","undefined","list","getWeather","_callee","e","Api_Key","weather_api_call","forecast_api_call","weatherResponse","forecastResponse","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","fetch","sent","json","_this","setState","sys","speed","clouds","all","weather","stop","this","weatherForecast","rows","forecastList","xs","size","offset","md","key","weatherCard","newforecastList","filter","element","getDay","currentWeather","lg","weatherGraph","_this2","titles","border","borderRadius","search","textAlign","dayForecastTitle","weekForecastTitle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAkBeA,EAfA,WAIb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MALQ,CACrBC,WAAY,kEAKRL,EAAAC,EAAAC,cAAA,QAAMI,MAAM,SACVN,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aAAd,gBACAP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,OAAMH,MAAO,CAACI,YAAa,SAAxC,6DCQKC,EAjBA,SAACC,GACd,OACEV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWQ,OAAK,EAACP,MAAO,CAACI,YAAa,OACpCR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,SAAUF,EAAMG,YAAaC,QAAM,GACvCd,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOY,IAAI,OAAOC,QAAM,GAAxB,QACAhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,WAAY,cAAeY,YAAa,SAAUC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAExGpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOY,IAAI,UAAUC,QAAM,GAA3B,WACAhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,WAAY,cAAeY,YAAa,SAAUC,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAE3GpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,MAAO,CAACa,YAAa,SAAUX,MAAM,QAA9C,kBCIOe,EAjBC,SAACX,GAEf,OAEIV,EAAAC,EAAAC,cAAA,WACGQ,EAAMY,SAAWZ,EAAMa,MAAQvB,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMa,KAArB,QAAgCb,EAAMY,SACrEZ,EAAMc,aAAexB,EAAAC,EAAAC,cAAA,0BAAkBuB,KAAKC,MAAMhB,EAAMc,aAAe,SACvEd,EAAMiB,UAAY3B,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMiB,SAArB,MAClBjB,EAAMkB,UAAY5B,EAAAC,EAAAC,cAAA,uBAAeQ,EAAMkB,SAArB,QAClBlB,EAAMmB,MAAQ7B,EAAAC,EAAAC,cAAA,mBAAWQ,EAAMmB,KAAjB,QACdnB,EAAMoB,YAAc9B,EAAAC,EAAAC,cAAA,yBAAiBQ,EAAMoB,WAAvB,MACpBpB,EAAMqB,aAAe/B,EAAAC,EAAAC,cAAA,0BAAkBQ,EAAMqB,aAC7CrB,EAAMsB,OAAShC,EAAAC,EAAAC,cAAA,UAAKQ,EAAMsB,SCepBC,EA1BK,SAACvB,GACjB,IAAMwB,EAAO,IAAIC,KAAKzB,EAAMwB,MAa5B,OACAlC,EAAAC,EAAAC,cAAA,OAAME,MAAO,CAACgC,WAAY,UAAUpC,EAAAC,EAAAC,cAAA,SAClCF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkC,MAAI,EAAC9B,UAAU,cAAcH,MATnB,CACdkC,UAAW,gBACXjC,WAAY,cACZkC,QAAS,cACTC,MAAO,SAMPxC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAY+B,EAAKO,WAAWC,MAAM,KAAK,IACvC1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAe+B,EAAKO,WAAWC,MAAM,KAAK,GAAK,IAAMR,EAAKS,WAC1D3C,EAAAC,EAAAC,cAAA,OAAKE,MAjBQ,CACbmC,QAAQ,eACRK,OAAQ,SACRC,SAAU,OAcYC,IAAG,mCAAAC,OAAqCrC,EAAMsC,KAA3C,UACzBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAWsB,KAAKC,MAAMhB,EAAMc,aAAe,SAC3CxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAWO,EAAMqB,YAAYkB,OAAO,GAAGC,cAAgBxC,EAAMqB,YAAYoB,MAAM,iGCyBxEC,EA5CM,SAAC1C,GAelB,IAdA,IAUIwB,EACAmB,EACA7B,EAHA8B,EAAO,GAKFC,EAAG,EAAGA,EAAI,EAAGA,IAClBrB,EAAO,IAAIC,KAAKzB,EAAM8C,SAASD,GAAGE,OAAS,QAC3CJ,EAAOK,IAAWxB,EAAM,QACxBV,EAAcC,KAAKC,MAAMhB,EAAM8C,SAASD,GAAGI,KAAKC,KAAO,QACvDN,EAAKO,KAAK,CACNR,OACA7B,gBAGR,OAEIxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkC,MAAI,EAAC9B,UAAU,cAAcH,MAzBrB,CACdkC,UAAW,gBACXjC,WAAY,cACZkC,QAAS,cACTC,MAAO,OACPK,SAAU,UAqBN7C,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAqBC,OAAQ,KACzB/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAWV,KAAMA,EACjBV,OAAQ,CAACqB,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC9CpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAOC,QAAQ,OAAOC,OAAO,SACzBvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOC,MAAM,OAAOC,SAAS,YAEjC1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOJ,OAAO,QAAQK,MAAO,CAAEH,MAAO,kBAAmBI,OAAQ,GAAIH,SAAU,UAC/E1E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAeP,OAAO,QAAQQ,gBAAgB,QAC9C/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,MACAhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAM/D,KAAK,WAAWoD,QAAQ,cAAcC,OAAO,SAASW,UAAW,CAACC,EAAG,SCkG5EC,6MAnIbC,MAAQ,CACN7D,iBAAa8D,EACb/D,UAAM+D,EACNhE,aAASgE,EACT3D,cAAU2D,EACV1D,cAAU0D,EACVzD,UAAMyD,EACNxD,gBAAYwD,EACZvD,iBAAauD,EACbtC,UAAMsC,EACNC,UAAMD,EACNtD,WAAOsD,KAETE,iDAAa,SAAAC,EAAOC,GAAP,IAAAC,EAAApE,EAAAD,EAAAsE,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAA/F,EAAAgG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEXV,EAAEW,iBACIV,EAAU,mCACVpE,EAAOmE,EAAEY,OAAOC,SAAShF,KAAKkD,MAE9BnD,EAAUoE,EAAEY,OAAOC,SAASjF,QAAQmD,MAN/ByB,EAAAE,KAAA,EAQoBI,MAAK,qDAAAzD,OAAsDxB,EAAtD,KAAAwB,OAA8DzB,EAA9D,WAAAyB,OAA+E4C,IARxG,cAQLC,EARKM,EAAAO,KAAAP,EAAAE,KAAA,EASqBI,MAAK,sDAAAzD,OAAuDxB,EAAvD,KAAAwB,OAA+DzB,EAA/D,WAAAyB,OAAgF4C,IAT1G,cASLE,EATKK,EAAAO,KAAAP,EAAAE,KAAA,GAWmBR,EAAiBc,OAXpC,eAWLZ,EAXKI,EAAAO,KAAAP,EAAAE,KAAA,GAYoBP,EAAkBa,OAZtC,QAYLX,EAZKG,EAAAO,KAeRlF,GAAQD,EACTqF,EAAKC,SAAS,CACZpF,YAAasE,EAAgBnC,KAAKC,KAAO,OACzCrC,KAAMuE,EAAgB3E,KACtBG,QAASwE,EAAgBe,IAAIvF,QAC7BK,SAAUmE,EAAgBnC,KAAKhC,SAC/BC,SAAUkE,EAAgBnC,KAAK/B,SAC/BC,KAAMiE,EAAgBjE,KAAKiF,MAC3BhF,WAAYgE,EAAgBiB,OAAOC,IACnCjF,YAAa+D,EAAgBmB,QAAQ,GAAGlF,YACxCwD,KAAMQ,EAAiBR,KACvBvD,MAAO,KAGP2E,EAAKC,SAAS,CACd5E,MAAOhC,EAAAC,EAAAC,cAAA,yCA9BA,yBAAAgG,EAAAgB,SAAAzB,EAAA0B,iEAkCbC,gBAAkB,WAChB,IAAIC,EAAO,GACPC,EAAeX,EAAKtB,MAAME,KAC9B,GAA0B,oBAAhB+B,EACR,MAAO,GAETD,EAAKxD,KACL7D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKoH,GAAI,CAACC,KAAK,EAAGC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAClDE,IAAK,GACL3H,EAAAC,EAAAC,cAAC0H,EAAD,CACE1F,KAAMoF,EAAa,GAAG7D,OACtBjC,YAAa8F,EAAa,GAAG3D,KAAKC,KAAO,OACzCZ,KAAMsE,EAAa,GAAGL,QAAQ,GAAGjE,KACjCjB,YAAauF,EAAa,GAAGL,QAAQ,GAAGlF,gBAK5C,IAHA,IAAMG,EAAO,IAAIC,KACX0F,EAAkBP,EAAaQ,OAAO,SAAAC,GAAO,OAAI7F,EAAK8F,WAAa,IAAI7F,KAAK4F,EAAQtE,QAAQuE,WAE1FzE,EAAE,EAAIA,GAAK,EAAIA,IACrB8D,EAAKxD,KAAK7D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKoH,GAAI,CAACC,KAAK,EAAGC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAAIE,IAAKpE,EAAE,GACzEvD,EAAAC,EAAAC,cAAC0H,EAAD,CACE1F,KAAM2F,EAAkB,EAAFtE,EAAI,GAAGE,OAC7BjC,YAAaqG,EAAkB,EAAFtE,EAAI,GAAGI,KAAKC,KAAO,OAChDZ,KAAM6E,EAAkB,EAAFtE,EAAI,GAAG0D,QAAQ,GAAGjE,KACxCjB,YAAa8F,EAAkB,EAAFtE,EAAI,GAAG0D,QAAQ,GAAGlF,gBAGnD,OAAOsF,KAETY,eAAiB,WACf,GAA8B,qBAApBtB,EAAKtB,MAAM9D,MAAsD,qBAAvBoF,EAAKtB,MAAM/D,QAC3D,OAAOtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACLH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKoH,GAAI,CAACC,KAAM,EAAGC,OAAQ,GAAIS,GAAI,CAACV,KAAM,EAAGC,OAAQ,IACrDzH,EAAAC,EAAAC,cAAC+G,EAAD,CACEzF,YAAamF,EAAKtB,MAAM7D,YACxBD,KAAMoF,EAAKtB,MAAM9D,KACjBD,QAASqF,EAAKtB,MAAM/D,QACpBK,SAAUgF,EAAKtB,MAAM1D,SACrBC,SAAU+E,EAAKtB,MAAMzD,SACrBC,KAAM8E,EAAKtB,MAAMxD,KACjBC,WAAY6E,EAAKtB,MAAMvD,WACvBC,YAAa4E,EAAKtB,MAAMtD,YAE1BC,MAAO2E,EAAKtB,MAAMrD,SAElBhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK+H,GAAI,CAACV,KAAM,EAAGC,OAAQ,GAAIF,GAAG,MAClCvH,EAAAC,EAAAC,cAACiI,EAAD,CAAc3E,SAAYmD,EAAKtB,MAAME,kFAKrC,IAAA6C,EAAAjB,KAWN,OACEnH,EAAAC,EAAAC,cAAA,OAAME,MAAO,CAACgC,WAAY,YAAa9B,MAAO,UAC5CN,EAAAC,EAAAC,cAACmI,EAAD,MAEArI,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACoC,MAAO,MAAO8F,OAAQ,kBAAmBC,aAAc,SACnEvI,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACI,YAAa,OAAOR,EAAAC,EAAAC,cAACsI,EAAD,CAAQ3H,YAAasG,KAAK3B,cAC3DxF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACqI,UAAW,WAjBF,WACvB,GAA8B,qBAApBL,EAAK/C,MAAM9D,MAAsD,qBAAvB6G,EAAK/C,MAAM/D,QAC7D,MAAO,mBAe4BoH,IACnC1I,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWQ,OAAK,GACbwG,KAAKc,iBACNjI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACqI,UAAW,WAhBH,WACxB,GAA8B,qBAApBL,EAAK/C,MAAM9D,MAAsD,qBAAvB6G,EAAK/C,MAAM/D,QAC7D,MAAO,iBAc8BqH,IACnC3I,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGgH,KAAKC,oBAGVpH,EAAAC,EAAAC,cAAA,mBA9HU0I,IAAMC,kBCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpJ,EAAAC,EAAAC,cAACmJ,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0071be37.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nconst Titles = () =>{\r\n  const jumbotronStyle = {\r\n    background: 'linear-gradient(rgba(0, 0, 250, 0.35), rgba(125, 250, 250, 0)'\r\n  }\r\n  return (\r\n    <div>\r\n      <Jumbotron style={jumbotronStyle}>\r\n        <font color='white'>\r\n          <h1 className=\"display-1\">Weather App </h1>\r\n          <p className=\"lead\"style={{paddingLeft: \"15px\"}}>Find the 5 day weather forecast for different cities </p>\r\n        </font>\r\n      </Jumbotron>\r\n    </div>\r\n  )\r\n}\r\nexport default Titles;","import React from 'react';\r\nimport { Container, Form, FormGroup, Label, Input, Button} from 'reactstrap';\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <Container fluid style={{paddingLeft: '1%'}}>\r\n      <Form onSubmit={props.loadWeather} inline>\r\n        <FormGroup>\r\n          <Label for=\"city\" hidden>City</Label>\r\n          <Input style={{ background: 'transparent', borderColor: 'white'}} type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"country\" hidden>Country</Label>\r\n          <Input style={{ background: 'transparent', borderColor: 'white'}} type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        </FormGroup>\r\n        <Button  style={{borderColor: 'white'}} color=\"info\">Get Weather</Button>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\nexport default Search;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n \r\n  return(\r\n    \r\n      <div>\r\n        {props.country && props.city && <h5>Location: {props.city},    {props.country}</h5>}\r\n        {props.temperature && <h5>Temperature: {Math.round(props.temperature) + '\\xB0C'}</h5>}\r\n        {props.humidity && <h5>Humidity: {props.humidity} %</h5>}\r\n        {props.pressure && <h5>Pressure: {props.pressure} hPA</h5>}\r\n        {props.wind && <h5>Wind: {props.wind} m/s</h5>}\r\n        {props.cloudiness && <h5>Cloudiness: {props.cloudiness} %</h5>}\r\n        {props.description && <h5>Conditions:  {props.description}</h5>}\r\n        {props.error && <h5>{props.error}</h5>}\r\n     </div >\r\n    \r\n   )\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport { Card, CardTitle, CardText, CardSubtitle } from 'reactstrap';\r\n\r\nconst WeatherCard = (props) => {\r\n    const date = new Date(props.date);\r\n    const imgStyle = {\r\n        display:'inline-block', \r\n        margin: '0 auto',\r\n        minWidth: '25%'\r\n    };\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%'\r\n    }\r\n\r\n    return(\r\n    <div  style={{fontFamily: 'Arial'}}><b>\r\n      <Card body className=\"text-center\" style={cardStyle}>\r\n        <CardTitle>{date.toString().split(' ')[0]}</CardTitle>\r\n        <CardSubtitle>{date.toString().split(' ')[1] + \" \" + date.getDate()}</CardSubtitle>\r\n        <img style={imgStyle} src={`http://openweathermap.org/img/w/${props.icon}.png`}/>\r\n        <CardText>{Math.round(props.temperature) + '\\xB0C'}</CardText>\r\n        <CardText>{props.description.charAt(0).toUpperCase() + props.description.slice(1)}</CardText>\r\n      </Card></b>\r\n    </div>\r\n    )\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport { LineChart, Line, Label, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { Card } from 'reactstrap';\r\nimport dateFormat from 'dateformat'\r\n\r\nconst WeatherGraph = (props) => {\r\n    const cardStyle = {\r\n        boxShadow: '3px 5px black',\r\n        background: 'transparent',\r\n        display: 'inline-flex',\r\n        width: '100%',\r\n        minWidth: '700px'\r\n        \r\n    }\r\n\r\n    let data = []; \r\n    let date;\r\n    let time;\r\n    let temperature;\r\n    \r\n    for (let i =0; i < 9; i++) {\r\n        date = new Date(props.dataList[i].dt_txt + ' UTC')\r\n        time = dateFormat(date, \"H:MM\")\r\n        temperature = Math.round(props.dataList[i].main.temp - 273.15);\r\n        data.push({\r\n            time,\r\n            temperature\r\n        })\r\n    };\r\n    return (\r\n        \r\n        <Card body className=\"text-center\" style={cardStyle}>        \r\n            <ResponsiveContainer height={200}>\r\n                <LineChart data={data}\r\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                <XAxis dataKey=\"time\" stroke=\"black\">\r\n                    <Label value=\"Time\" position=\"bottom\" />\r\n                </XAxis>\r\n                <YAxis stroke=\"black\" label={{ value: 'Temperature (C)', angle: -90, position: 'left' }} />\r\n                <CartesianGrid stroke=\"white\" strokeDasharray=\"3 3\"/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"purple\" activeDot={{r: 8}}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>    \r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherGraph;","import React from 'react';\nimport Titles from './components/titles';\nimport Search from './components/search';\nimport Weather from './components/weather';\nimport WeatherCard from './components/weatherCard';\nimport WeatherGraph from './components/weatherGraph';\nimport { Container, Row, Col } from 'reactstrap';\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    pressure: undefined,\n    wind: undefined,\n    cloudiness: undefined,\n    description: undefined,\n    icon: undefined,\n    list: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    const Api_Key = '4f3ccf59baf3fe3b39327995560feed7';\n    const city = e.target.elements.city.value;\n\n    const country = e.target.elements.country.value;\n\n    const weather_api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n    const forecast_api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${Api_Key}`);\n\n    const weatherResponse = await weather_api_call.json();\n    const forecastResponse = await forecast_api_call.json();\n\n  \n    if(city && country){\n      this.setState({\n        temperature: weatherResponse.main.temp - 273.15,\n        city: weatherResponse.name,\n        country: weatherResponse.sys.country,\n        humidity: weatherResponse.main.humidity,\n        pressure: weatherResponse.main.pressure,\n        wind: weatherResponse.wind.speed,\n        cloudiness: weatherResponse.clouds.all,\n        description: weatherResponse.weather[0].description,\n        list: forecastResponse.list,\n        error: \"\"\n      })\n    }else{\n        this.setState({\n        error: <i>Please enter the values...</i>\n      })\n    }\n  }\n  weatherForecast = () => {\n    let rows = [];\n    let forecastList = this.state.list;\n    if(typeof forecastList == 'undefined') {\n      return \"\"\n    }\n    rows.push(\n    <Col xs={{size:6, offset: 3}} md={{size: 2, offset: 1}} \n      key={0}>\n      <WeatherCard\n        date={forecastList[0].dt_txt}\n        temperature={forecastList[0].main.temp - 273.15}\n        icon={forecastList[0].weather[0].icon}\n        description={forecastList[0].weather[0].description}\n      /></Col>);\n    const date = new Date();\n    const newforecastList = forecastList.filter(element => date.getDay() !== new Date(element.dt_txt).getDay());\n    \n    for(let i=1 ; i <= 4 ; i++) {\n      rows.push(<Col xs={{size:6, offset: 3}} md={{size: 2, offset: 0}} key={i+1}>\n      <WeatherCard\n        date={newforecastList[i*8-1].dt_txt}\n        temperature={newforecastList[i*8-1].main.temp - 273.15}\n        icon={newforecastList[i*8-1].weather[0].icon}\n        description={newforecastList[i*8-1].weather[0].description}\n      /></Col>);\n    }\n    return rows;\n  } \n  currentWeather = () => {\n    if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return(<Row>\n          <Col xs={{size: 8, offset: 0}} lg={{size: 2, offset: 1}}>\n          <Weather\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            pressure={this.state.pressure}\n            wind={this.state.wind}\n            cloudiness={this.state.cloudiness}\n            description={this.state.description}\n\n          error={this.state.error} />\n          </Col>\n          <Col lg={{size: 8, offset: 0}} xs='12'>\n          <WeatherGraph dataList = {this.state.list}/>\n          </Col>\n        </Row>)\n    }\n  } \n  render(){\n    const dayForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"24 Hour Forecast\";\n      }\n    }\n    const weekForecastTitle = () => {\n      if(typeof this.state.city !== 'undefined' || typeof this.state.country !== 'undefined') {\n        return \"5 Day Forecast\";\n      }\n    }\n    return(\n      <div  style={{fontFamily: 'Open Sans', color: 'white'}}>\n        <Titles />\n        \n        <hr style={{width: '95%', border: '1px solid white', borderRadius: '5px'}}/>\n        <div style={{paddingLeft: '2%'}}><Search loadWeather={this.getWeather}/></div>\n        <br/>\n        <h2 style={{textAlign: 'center'}}>{dayForecastTitle()}</h2>\n        <Container fluid>\n          {this.currentWeather()}\n          <br/>\n          <h2 style={{textAlign: 'center'}}>{weekForecastTitle()}</h2>\n          <Row>\n            {this.weatherForecast()}\n          </Row>\n        </Container>\n        <br/>\n      </div>\n\n   )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}